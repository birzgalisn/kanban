// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sessionToken])
  @@index([userId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  role           Role      @default(USER)
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  accounts       Account[]
  sessions       Session[]

  workspaces Member[]
  invites    Invite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invite {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  user     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String?
  member   Member? @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([memberId])
}

model Workspace {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  members Member[]
  boards  Board[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Member {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  isOwner     Boolean   @default(false)
  invites     Invite[]
  comments    Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([workspaceId])
}

model Board {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  title       String
  lists       List[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
}

model List {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId String
  title   String
  cards   Card[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([boardId])
}

model Card {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  list        List      @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId      String
  title       String
  description String?
  deadline    DateTime?
  tags        Tag[]
  todos       Todo[]
  comments    Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([listId])
}

model Tag {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  card     Card    @relation(fields: [cardId], references: [id])
  cardId   String
  title    String
  colorHex String? @default("#f8bd1c")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cardId])
}

model Todo {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  card        Card    @relation(fields: [cardId], references: [id], onDelete: Cascade)
  cardId      String
  done        Boolean @default(false)
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cardId])
}

model Comment {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  card     Card   @relation(fields: [cardId], references: [id])
  cardId   String
  member   Member @relation(fields: [memberId], references: [id])
  memberId String
  comment  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cardId])
  @@index([memberId])
}
