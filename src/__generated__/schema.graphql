type Board {
  createdAt: DateTime!
  id: ID!
  lists: [List!]!
  title: String!
  updatedAt: DateTime!
  workspace: Workspace!
  workspaceId: String!
}

type Card {
  comments: [Comment!]!
  createdAt: DateTime!
  deadline: DateTime
  description: String
  id: ID!
  list: List!
  listId: String!
  tags: [Tag!]!
  title: String!
  todos: [Todo!]!
  updatedAt: DateTime!
}

type Comment {
  card: Card!
  cardId: String
  comment: String!
  createdAt: DateTime!
  id: ID!
  member: Member!
  memberId: String
  updatedAt: DateTime!
}

input CreateUserInput {
  email: String!
  name: String!
  password: String!
}

input CreateWorkspaceInput {
  title: String!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

interface Error {
  message: String!
}

type Invite {
  createdAt: DateTime!
  id: ID!
  member: Member!
  memberId: String
  updatedAt: DateTime!
  user: User!
  userId: String
}

type List {
  board: Board!
  boardId: String!
  cards: [Card!]!
  createdAt: DateTime!
  id: ID!
  title: String!
  updatedAt: DateTime!
}

type Member {
  comments: [Comment!]!
  createdAt: DateTime!
  id: ID!
  invites: [Invite!]!
  isOwner: Boolean!
  updatedAt: DateTime!
  user: User!
  userId: String
  workspace: Workspace!
  workspaceId: String
}

type Mutation {
  createUser(input: CreateUserInput!): MutationCreateUserResult!
  createWorkspace(input: CreateWorkspaceInput!): MutationCreateWorkspaceResult!
}

union MutationCreateUserResult = MutationCreateUserSuccess | ZodError

type MutationCreateUserSuccess {
  data: User!
}

union MutationCreateWorkspaceResult = MutationCreateWorkspaceSuccess | ZodError

type MutationCreateWorkspaceSuccess {
  data: Workspace!
}

type Query {
  me: User!
  workspace(id: String!): Workspace!
  workspaces: [Workspace!]
}

"""User roles"""
enum Roles {
  ADMIN
  USER
}

type Tag {
  card: Card!
  cardId: String!
  colorHex: String
  createdAt: DateTime!
  id: ID!
  title: String!
  updatedAt: DateTime!
}

type Todo {
  card: Card!
  cardId: String!
  createdAt: DateTime!
  description: String!
  done: Boolean!
  id: ID!
  updatedAt: DateTime!
}

type User {
  createdAt: DateTime!
  email: String
  emailVerified: DateTime
  id: ID!
  image: String
  invites: [Invite!]!
  name: String
  role: Roles!
  updatedAt: DateTime!
  workspaces: [Member!]!
}

type Workspace {
  boards: [Board!]!
  createdAt: DateTime!
  id: ID!
  members: [Member!]!
  title: String!
  updatedAt: DateTime!
}

type ZodError implements Error {
  fieldErrors: [ZodFieldError!]!
  message: String!
}

type ZodFieldError {
  message: String!
  path: [String!]!
}